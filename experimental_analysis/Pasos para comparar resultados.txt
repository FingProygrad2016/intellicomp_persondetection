Primero, de los resultados del MOT, se eligen las mejores combinaciones.

<<< Comienza acotación >>>
Durante este proceso, también se ve qué valores para cada columna parecen ser los mejores, comparando configuraciones en que los valores de las demás columnas se mantengan fijos. Se hace esto con dos o tres configuraciones de las otras columnas.
Por ejemplo, si se tienen las combinaciones:
Configuración, Columna 1, Columna 2, Columna 3, Resultado
----------------------------------------------------------
			1						A1					A2				A3					R1
			2						A1					A2				B3					R2
			3						A1					B2				A3					R3
			4						A1					B2				B3					R4
			5						B1					A2				A3					R5
			6						B1					A2				B3					R6
			7						B1					B2				A3					R7
			8						B1					B2				B3					R8
Para ver el mejor valor de la Columna 1, se pueden elegir las configuraciones 1 y 5, que tienen diferente valor de la Columna 1, pero iguales valores en las restantes columnas. La que tenga un mejor resultado de las dos, indica un mejor valor de la Columna 1.
Para corroborar, se pueden elegir además las configuraciones 3 y 7, y realizar la misma comparación de resultados.

De esta forma, se pueden encontrar los mejores valores para cada variable (columna).

No se tiene por qué llegar a un único valor bueno, ya que en general las columnas no son independientes. Con una configuración de las otras columnas, un valor A puede ser mejor que uno B, pero con otra configuración, ser mejor el B. Lo que se quiere encontrar no es el mejor valor, sino los mejores.

Luego de que se tienen los mejores valores para cada columna, se pueden seleccionar las configuraciones que posean dichos valores.

Para cada variable (Columna), tratar de explicar por qué ciertos valores resultan buenos y por qué resultan malos los otros. Realizar esta deducción a partir de los resultados del MOT y del conteo (utilizar también histogramas).
<<< Finaliza acotación >>>

Obtenidas las mejores combinaciones del MOT, se comprueba que también tengan buenos resultados en el conteo de las personas (mediante el uso de la tabla con las métricas).
Si hay alguna que tenga malos resultados, se la estudia aparte (ya que es raro que dé bien en el MOT y mal en el conteo).

Finalmente, se filtran las configuraciones que tengan malos tiempos de ejecución.


---------------------------------------------------------------

Background Subtraction:
Bloque 1:
Ordenado por MOTAL: se observa que los distintos valores de DETECT_SHADOWS y SHADOW_THRESHOLD no afectan significativamente los resultados. Por lo tanto, se pueden omitir dichas variables para los resultados. Omitiendo esas variables, las mejores tres configuraciones son la 14, 13 y 22.
14	105	140	5	False	N/A	False	True	N/A
13	105	140	3	False	N/A	False	True	N/A
22	175	140	3	False	N/A	False	True	N/A
Esas tres son también los mejores resultados en el conteo de personas, y sus tiempos de ejecución están dentro del promedio entre los mejores resultados.
Bloque 2:
Utilizando las mejores tres configuraciones del Bloque 1 y variando los valores del Bloque 2.
Ordenado por MOTAL: 253, 314, 14, 67, 68.
Ordenado por error medio (mean) de conteo de personas por tracklets, la mejor es la 278.
Los tiempos en esas dos primeras posiciones no son malos, por lo que estas se eligen para blob detection.
253: 175	140	3	FALSE	N/A	FALSE	TRUE	N/A	(9, 9)	(2, 2)	1	(3, 2)	1
278: 175	140	3	FALSE	N/A	FALSE	TRUE	N/A	(9, 9)	(4, 4)	1	(3, 2)	3

Blobs Detection:
Utilizamos como base la configuración 253 de Background Subtraction, y se agregan al generador de configuraciones los cambios para incluir también la configuración 278 de Background Subtraction.
Ordenado por MOTAL, la mejor es la 3.
Ordenado por error medio (mean) de conteo de personas por tracklets, la mejor es la 127.
Los tiempos en esas dos primeras posiciones no son malos, por lo que estas se eligen para blob detection.
3: 		(2, 2) 	1	N/A	N/A	N/A	N/A	True	True	0.2
127: 	(4, 4) 	3	N/A	N/A	N/A	N/A	True	True	0.2

Filtro de Blobs:
Bloque 1:
Se eligen las configuraciones 29 (mejor por MOTAL (48.9)), 4 (de las mejores en MOTAL, es la que tiene mejor counter) y 35 (mejor counter (0.4)).
29: (2, 2)	1	TRUE	5000	FALSE	N/A	N/A
4: 	(2, 2)	1	TRUE	2500	TRUE	0.7	0.1
35: (4, 4)	3	TRUE	2500	TRUE	0.7	0.1

Bloque 2:
En la ejecución de la configuración 1 no se procesaron 28 frames.
En la ejecución de la configuración 10 no se procesaron 33 frames.
En la ejecución de la configuración 19 no se procesaron 31 frames.
En la ejecución de la configuración 28 no se procesaron 40 frames.
En la ejecución de la configuración 37 no se procesaron 35 frames.
En la ejecución de la configuración 46 no se procesaron 40 frames.
En la ejecución de la configuración 55 no se procesaron 2 frames.
En la ejecución de la configuración 64 no se procesaron 8 frames.
En la ejecución de la configuración 73 no se procesaron 8 frames.
Estas configuraciones son las que tienen SCALE en 1.01.
Se eligen las configuraciones 77 (mejor por MOTAL (49.2)), 77 (de las mejores 10 en MOTAL, es la que tiene mejor counter) y 78 (mejor counter (0.39)). Se repite la 77, por lo que son sólo dos configuraciones.
77:	(4, 4) 	3	True	2500	True	0.7	0.1	3	1.1	 (4, 4)
78:	(4, 4) 	3	True	2500	True	0.7	0.1	3	1.1	 (8, 8)

Bloque 3:
Las 8 configuraciones se dividen en 4 bloques de resultados diferentes.
De las 3 configuraciones con mejor resultado en el MOTAL, se elige la 2, que es la que tiene un mejor tiempo, aunque estos distan muy poco unos de otros. Además, estas configuraciones tienen el segundo lugar por counter, por lo que sólo se elige una configuración más (la mejor en counter).
Hay 3 configuraciones que son las mejores en el counter, por lo que se elige la que tiene un mejor tiempo (aunque por poco margen): 7.
Resumiendo, del bloque 3 se eligen las configuraciones 2 y 7.
2:	 (4, 4) 	3	True	2500	True	0.7	0.1	3	1.1	 (4, 4) 	True	2
7:	 (4, 4) 	3	True	2500	True	0.7	0.1	3	1.1	 (8, 8) 	True	4

Bloque 4:
Las configuraciones 3 y 6 (border around blob en 0.5) lanzan el siguiente error antes de llegar a procesar 20 frames, utilizando el modelo (USE_MODEL):
OpenCV Error: Assertion failed (j < nimages) in histPrepareImages, file /Users/usuario/opencv/modules/imgproc/src/histogram.cpp, line 146
Traceback (most recent call last):
  File "__main__.py", line 812, in <module>
    trackermaster_conf=tmconf, patternmaster_conf=pmconf)
  File "__main__.py", line 493, in track_source
    bg_subtraction_resized, number_frame)
  File "../trackermaster/black_boxes/tracking.py", line 278, in apply
    get_color_aux(raw_image, bg_subtraction_image, blob["box"])
  File "../trackermaster/black_boxes/tracking.py", line 1319, in get_color_aux
    get_color_histogram(image, bg_subtraction_image, rect)
  File "../utils/tools.py", line 94, in get_color_histogram
    crop_image_with_rect(bg_subtraction_image, rect)[0:, 0:, 0]
  File "../utils/tools.py", line 131, in get_color_histogram_aux
    [0, 256, 0, 256, 0, 256])
cv2.error: /Users/usuario/opencv/modules/imgproc/src/histogram.cpp:146: error: (-215) j < nimages in function histPrepareImages
